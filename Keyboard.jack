// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

	static int KEYBOARD;
	static int MAX_LINE_LEN;
	static char BACKSPACE;
	static char NEWLINE;
	
    /** Initializes the keyboard. */
    function void init() {
		let KEYBOARD = 24576;
		let MAX_LINE_LEN = 64;
		let BACKSPACE = String.backSpace();
		let NEWLINE = String.newLine();

		return;
    } 

    /**
     * Returns the ASCII code (as char) of the currently pressed key,
     * or 0 if no key is currently pressed.
     * Recognizes all ASCII characters, as well as the following extension
     * of action keys:
     * New line = 128 = String.newline()
     * Backspace = 129 = String.backspace()
     * Left Arrow = 130
     * Up Arrow = 131
     * Right Arrow = 132
     * Down Arrow = 133
     * Home = 134
     * End = 135
     * Page Up = 136
     * Page Down = 137
     * Insert = 138
     * Delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
		return Memory.peek(KEYBOARD);
    }

	/* Same as readChar, only this function doesn't echoes backspace.
	 * Used in the readLine function to avoid deleting unwritten characters. */
	 function char readCharNoBackspaceEcho()  {
 		var char key;  	// the current key pressed
		var char c;		// the displayed char
		
		do Output.printChar(0);			// displaying the cursor
		let key = 0;
		while (key = 0) {
			let key = Keyboard.keyPressed();
		}
		let c = key;
		while (~(Keyboard.keyPressed() = 0)) {}		// waits until the key is released
		do Output.backSpace();						// removes the cursor
		
		if (~(c = BACKSPACE)) {						// doesn't echo BACKSPACE
			do Output.printChar(c);
		}
		return c;
	 }
	
	
    /**								
     * Reads the next character from the keyboard.
     * waits until a key is pressed and then released, then echoes
     * the key to the screen, and returns the value of the pressed key.
     */
    function char readChar() {
		var char c;				// the displayed char
		
		let c = Keyboard.readCharNoBackspaceEcho();
		if (c = BACKSPACE) {	// echoes BACKSPACE if needed
			do Output.backSpace();
		}
		
		return c;
    }

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its value.
     */
    function String readLine(String message) {
		var char c;
		var String s;
		var int advanced;
		
		let s = String.new(MAX_LINE_LEN);
		do Output.printString(message);
		
		let advanced = 0;
		while (true) {		
			let c = Keyboard.readCharNoBackspaceEcho();
			if (c = NEWLINE) {
				return s;
			}
			if (c = BACKSPACE) {
				if (advanced > 0) {
					do s.eraseLastChar();
					do Output.backSpace();
					let advanced = advanced - 1;
				}
			}
			else {
				let s = s.appendChar(c);
				let advanced = advanced + 1;
			}
		}
		
		return s;
	}   

    /**								
     * Prints the message on the screen, reads the next line
     * (until a newline character) from the keyboard, and returns its
     * integer value (until the first non numeric character).
     */
    function int readInt(String message) {
		var String line;
		var int intVal;
		
		let line = Keyboard.readLine(message);
		let intVal = line.intValue();
		do line.dispose();
		return intVal;
	}
}
