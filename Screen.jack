// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

	static int SCREEN, SCREEN_END;
	static int MAX_RADIUS;
	static boolean color;
	static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
		let SCREEN = 16384;
		let SCREEN_END = 24576;
		let MAX_RADIUS = 181;
		let color = true;
		let twoToThe = Screen.initTwoToThe();

		return;
    }

	/* Initializes a 16 entries array of bit masks. 
	 * bitMasks[i] = 1 in the i'th entry and 0 elsewhere. */
	function Array initTwoToThe() {
		var Array bitMasks;
		var int i, value;
		
		let bitMasks = Array.new(16);
		let i = 0;
		let value = 1;
		while (i < 16) {
			let bitMasks[i] = value;
			let value = value + value;
			let i = i + 1;
		}
		return bitMasks;
	}
	
    /** Erases the whole screen. */
    function void clearScreen() {
		var int i;
		let i = SCREEN;
		while (i < SCREEN_END) {
			do Memory.poke(i, 0);	// clearing a complete word (16 bits)
			let i = i + 1;
		}
		return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
		let color = b;
		return;
    }
	
	/* Applies the given mask on the word in wordLoc on the screen. */
	function void paintWord(int wordLoc, int mask) {
		var int word;
	
		let word = Memory.peek(wordLoc);
		if (color) {						// color = black
			let word = word | mask;
		}
		else {								// color = white
			let word = word & (~mask);	
		}
		do Memory.poke(wordLoc, word);
		return;
	}
	
    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
		do Screen.paintWord(SCREEN + (y * 32) + (x / 16), twoToThe[Screen.mod16(x)]);
		return;
	}
	

	/* Draws an horizontal line from (x,y) to (x+dx,y). 
	 * assuming dx >= 0. */
	function void drawHorizontalLine(int x, int y, int dx) {
		var int off, wordLoc, i, lim;
		
		let lim = x + dx + 1;	// one pixel after the limit
		let off = Screen.mod16(x);
		if (off > 0) {
			while (off < 16) {		// till x % 16 = 0
				do Screen.drawPixel(x, y);
				let off = off + 1;
				let x = x + 1;
				if (x = lim) {
					return;
				}
			}			
		}
		
		let wordLoc = SCREEN + (y * 32) + (x / 16);
		let i = (lim - x) / 16;
		let x = x + (i * 16);
		while (i > 0) {
			do Memory.poke(wordLoc, color);		// draws whole word
			let wordLoc = wordLoc + 1;
			let i = i - 1;
		}
		
		while (x < lim) {
			do Screen.drawPixel(x, y);
			let x = x + 1;
		}
		
		return;
	}
	
	/* Draws a vertical line from (x,y) to (x,y+dy). 
	 * assuming dy >= 0. */
	function void drawVerticalLine(int x, int y, int dy) {
		var int mask, wordLoc, word;
		
		let mask = twoToThe[Screen.mod16(x)];
		let wordLoc = SCREEN + (y * 32) + (x / 16);
		while (~(dy < 0)) {
			do Screen.paintWord(wordLoc, mask);
			let wordLoc = wordLoc + 32;		// advances to next line
			let dy = dy - 1;
		}
		return;
	}
	
	/** Draws a line from (x, y) to (x+dx,y+dy).
	 * assuming dx,dy > 0. */
	function void drawLinePosdxdy(int x, int y, int dx, int dy) {
		// TODO: shouldn't check if adyMinusbdx = 0 and then update 
		// a++; b++; in the same case?
	
		var int a, b, adyMinuxbdx;
		
		let a = 0;
		let b = 0;
		let adyMinuxbdx = 0;
		while ((~(a > dx)) & (~(b > dy))) {
			do Screen.drawPixel(x + a, y + b);
			if (adyMinuxbdx < 0) {
				let a = a + 1;
				let adyMinuxbdx = adyMinuxbdx + dy;
			}
			else {
				let b = b + 1;
				let adyMinuxbdx = adyMinuxbdx - dx;
			}
		}
		
		return;
	}
	
	/** Draws a line from (x, y) to (x+dx,y+dy).
	 * assuming dx > 0, dy < 0. */
	function void drawLinePosdxNegdy(int x, int y, int dx, int dy) {
		// TODO: shouldn't check if adyMinusbdx = 0 and then update 
		// a++; b++; in the same case?
		// TODO: check function! (edge cases - strong and weak inequalities).
		
		var int a, b, adyMinuxbdx, absdy;
		
		let a = 0;
		let b = 0;
		let absdy = Math.abs(dy);
		let adyMinuxbdx = 0;
		while ((~(a > dx)) & (~(b < dy))) {
			do Screen.drawPixel(x + a, y + b);
			if (adyMinuxbdx < 0) {
				let a = a + 1;
				let adyMinuxbdx = adyMinuxbdx + absdy;
			}
			else {
				let b = b - 1;
				let adyMinuxbdx = adyMinuxbdx - dx;
			}
		}
		
		return;
	}
	
    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int minX, minY, dx, dy, absdx, absdy;

		let minX = Math.min(x1, x2);
		let minY = Math.min(y1, y2);
		let dx = x2 - x1;
		let dy = y2 - y1;		
		let absdx = Math.abs(dx);
		let absdy = Math.abs(dy);
		
		if (y1 = y2) {
			do Screen.drawHorizontalLine(minX, y1, absdx);
			return;
		}
		
		if (x1 = x2) {
			do Screen.drawVerticalLine(x1, minY, absdy);
			return;
		}
		
		if (((dx > 0) & (dy > 0)) | ((dx < 0) & (dy < 0))) {
			do Screen.drawLinePosdxdy(minX, minY, absdx, absdy);
			return;
		}
		else {	
			do Screen.drawLinePosdxNegdy(minX, Math.max(y1, y2), absdx, -absdy);
			return;
		}
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int dx, dy;
		
		let dx = x2 - x1;		
		while (~(y1 > y2)) {
			do Screen.drawHorizontalLine(x1, y1, dx);
			let y1 = y1 + 1;
		}
			
		return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
		var int dy, rSquared, dySquared, tmp;
		
		if (r > MAX_RADIUS) {	// todo: is that the required behaviour?
			let r = MAX_RADIUS;
		}
		
		let rSquared = r * r;
		let dySquared = rSquared;
		let dy = -r;
		while (~(dy > r)) {
			let tmp = Math.sqrt(rSquared - dySquared);
			do Screen.drawHorizontalLine(cx - tmp, cy + dy, tmp + tmp);
			let dySquared = dySquared + dy + dy + 1;
			let dy = dy + 1;
		}
		return;
    }
	
	/* Returns n % 16. */
	function int mod16(int n) {
		return (15 & n);
	}
	
}
